{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPLI6N+ShH4wBWXKFuq1p1I",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Durgadevi3105/streamlit-mini-project/blob/main/MINI_PROJECT.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "y3bXTe_z-2IW"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import psycopg2\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_db_connection():\n",
        "    conn = psycopg2.connect(\n",
        "        host=\"dbdurga.c7igy8goq28e.ap-south-1.rds.amazonaws.com\",\n",
        "        port=5432,\n",
        "        database=\"postgres\",\n",
        "        user=\"postgres\",\n",
        "        password=\"tharshan\")\n",
        "    return conn\n",
        "\n",
        "def run_query(query):\n",
        "    conn = get_db_connection()\n",
        "    if conn is None:\n",
        "        return None\n",
        "    try:\n",
        "        df = pd.read_sql(query, conn)\n",
        "        return df\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error executing query: {e}\")\n",
        "        return None\n",
        "    finally:\n",
        "        conn.close()\n",
        "\n",
        "st.title(\"Retail Order Dashboard\")\n",
        "\n",
        "\n",
        "queries_by_guvi={\n",
        "\n",
        "        \" Top 10 highest revenue products\":\n",
        "        'SELECT product_id,SUM(quantity * sale_price) AS revenue FROM df GROUP BY product_id ORDER BY revenue DESC LIMIT 10;',\n",
        "\n",
        "        \" Find the top 5 cities with the highest profit margins\":\n",
        "        'SELECT o.\"city\", SUM(d.\"profit\") AS Total_Profit FROM df o JOIN  df1_orders d ON  o.\"sub category\" = d.\"sub category\" GROUP BY  o.\"city\" ORDER BY Total_Profit DESC LIMIT 5;',\n",
        "\n",
        "\n",
        "        \"Calculate the total discount given for each category\":\n",
        "         'SELECT category, SUM(discount) AS total_discount FROM df GROUP BY category;',\n",
        "\n",
        "\n",
        "        \" Find the average sale price per product category\":\n",
        "        'SELECT category, AVG(sale_price) AS average_sale_price FROM df GROUP BY category;',\n",
        "\n",
        "\n",
        "        \"Find the region with the highest average sale price\":\n",
        "        'SELECT region, AVG(sale_price) AS average_sale_price FROM df GROUP BY region ORDER BY average_sale_price DESC LIMIT 1;',\n",
        "\n",
        "        \" Find the total profit per category\":\n",
        "        'SELECT category, SUM(sale_price - cost_price) AS total_profit FROM df GROUP BY category;',\n",
        "\n",
        "\n",
        "        \"Identify the top 3 segments with the highest quantity of orders\":\n",
        "        'SELECT segment, SUM(quantity) AS total_quantity FROM df GROUP BY segment ORDER BY total_quantity DESC LIMIT 3;',\n",
        "\n",
        "        \"Determine the average discount percentage given per region\":\n",
        "        'SELECT region, AVG(discount / sale_price * 100) AS average_discount_percent FROM df GROUP BY region;',\n",
        "\n",
        "\n",
        "        \"Find the product category with the highest total profit\":\n",
        "        'SELECT category, SUM(sale_price - cost_price) AS total_profit FROM df GROUP BY category ORDER BY total_profit DESC LIMIT 1;',\n",
        "\n",
        "        \"Calculate the total revenue generated per year\":\n",
        "        'SELECT DATE_PART ('year', \"order_date\") AS \"year\", SUM(\"sale_price\" * \"quantity\") AS total_revenue FROM df GROUP BY  DATE_PART ('year', \"order_date\") ORDER BY year ;',\n",
        "}\n",
        "\n",
        "my_own_queries= {\n",
        "\n",
        "       \"find the Products with no profit\":\n",
        "        'SELECT product_id FROM df GROUP BY product_id HAVING SUM(profit) = 0;',\n",
        "\n",
        "        \"Calculate total revenue per shipping mode\":\n",
        "         'SELECT ship_mode, SUM(quantity * sale_price) AS total_revenue FROM df GROUP BY ship_mode ORDER BY total_revenue DESC;',\n",
        "\n",
        "        \"Find the top 3 cities with the lowest total discounts\":\n",
        "         'SELECT city, SUM(discount) AS total_discount FROM df GROUP BY city ORDER BY total_discount ASC LIMIT 3;',\n",
        "\n",
        "\n",
        "        \"Identify the sub-category with the highest revenue\":\n",
        "         'SELECT sub_category, SUM(quantity * sale_price) AS revenue FROM df GROUP BY sub_category ORDER BY revenue DESC LIMIT 1;',\n",
        "\n",
        "\n",
        "        \"Find the average quantity of orders per product category\":\n",
        "         'SELECT category, AVG(quantity) AS average_quantity FROM df GROUP BY category ORDER BY average_quantity DESC;',\n",
        "\n",
        "\n",
        "        \"Find the product with the highest total quantity sold\":\n",
        "         'SELECT product_id, SUM(quantity) AS total_quantity_sold FROM df GROUP BY product_id ORDER BY total_quantity_sold DESC LIMIT 1;',\n",
        "\n",
        "         \"Find the month with the highest revenue\":\n",
        "         'SELECT  TO_CHAR(order_date,'YYYY-MM') AS month, SUM(quantity * sale_price) AS total_revenue FROM  df GROUP BY TO_CHAR(order_date, 'YYYY-MM') ORDER BY  total_revenue DESC LIMIT 1;',\n",
        "\n",
        "\n",
        "\n",
        "        \"Find the state with the highest number of orders\":\n",
        "        'SELECT state, COUNT(*) AS order_count  FROM df GROUP BY state ORDER BY order_count DESC LIMIT 1;',\n",
        "\n",
        "\n",
        "\n",
        "        \"Calculate the total revenue and profit for each region\":\n",
        "       'SELECT region, SUM(quantity * sale_price) AS total_revenue, SUM((sale_price - cost_price) * quantity) AS total_profit FROM df GROUP BY region ORDER BY total_revenue DESC;',\n",
        "\n",
        "\n",
        "\n",
        "        \"Calculate the percentage contribution of each region to total revenue\":\n",
        "        'SELECT region, SUM(quantity * sale_price) AS total_revenue FROM df GROUP BY region;',\n",
        "        'SELECT SUM(quantity * sale_price) AS total_revenue FROM df;'\n",
        " }\n",
        "\n",
        "\n",
        "nav = st.radio(\"Select Query Section\", [\"queries by GUVI\", \"My Own Queries\"])\n",
        "\n",
        "if nav == \"queries by GUVI\":\n",
        "         st.subheader(\"queries by GUVI\")\n",
        "         query = st.selectbox(\"Select a query to visualize:\", list(queries_by_guvi.keys()))\n",
        "         selected_query_set = queries_by_guvi\n",
        "elif nav == \"My Own Queries\":\n",
        "         st.subheader(\"My Own Queries\")\n",
        "         query = st.selectbox(\"Select a query to visualize:\", list(my_own_queries.keys()))\n",
        "         selected_query_set = my_own_queries\n",
        "\n",
        "else:\n",
        "          query = None\n",
        "\n",
        "if query:\n",
        "        result_df = run_query(selected_query_set[query])\n",
        "        if result_df is not None:\n",
        "          st.dataframe(result_df)\n",
        "\n",
        "\n",
        "\n",
        "        if query == \"Top 10 highest revenue generating products\":\n",
        "             result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"product id\"], result_df[\"total_revenue\"], color='skyblue')\n",
        "            plt.title(\"Top 10 Highest Revenue Generating Products\")\n",
        "            plt.xlabel(\"Product ID\")\n",
        "            plt.ylabel(\"Total Revenue\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "\n",
        "        elif query == \"Top 5 cities with the highest profit margins\":\n",
        "               result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"city\"], result_df[\"total_profit\"], color='lightgreen')\n",
        "            plt.title(\"Top 5 Cities with the Highest Profit Margins\")\n",
        "            plt.xlabel(\"City\")\n",
        "            plt.ylabel(\"Total Profit\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"Total discount given for each category\":\n",
        "             result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"category\"], result_df[\"total_discount\"], color='orange')\n",
        "            plt.title(\"Total Discount Given for Each Category\")\n",
        "            plt.xlabel(\"Category\")\n",
        "            plt.ylabel(\"Total Discount\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"Average sales price per product category\":\n",
        "              result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"category\"], result_df[\"average_sales_price\"], color='purple')\n",
        "            plt.title(\"Average Sales Price Per Product Category\")\n",
        "            plt.xlabel(\"Category\")\n",
        "            plt.ylabel(\"Average Sales Price\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query== \"Total profit per category\":\n",
        "             result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"category\"], result_df[\"total_profit\"], color='violet')\n",
        "            plt.title(\"Total Profit Per Category\")\n",
        "            plt.xlabel(\"Category\")\n",
        "            plt.ylabel(\"Total Profit\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"Top 3 segments with the highest quantity of orders\":\n",
        "              result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"category\"], result_df[\"highest_quantity\"], color='magenta')\n",
        "            plt.title(\"Top 3 Segments with the Highest Quantity of Orders\")\n",
        "            plt.xlabel(\"Category\")\n",
        "            plt.ylabel(\"Highest Quantity\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"Average discount percentage given per region\":\n",
        "              result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"region\"], result_df[\"avg_discount_percent\"], color='salmon')\n",
        "            plt.title(\"Average Discount Percentage Given Per Region\")\n",
        "            plt.xlabel(\"Region\")\n",
        "            plt.ylabel(\"Average Discount Percentage\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"Product category with the highest total profit\":\n",
        "             result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"category\"], result_df[\"highest_total_profit\"], color='orange')\n",
        "            plt.title(\"Product Category with the Highest Total Profit\")\n",
        "            plt.xlabel(\"Category\")\n",
        "            plt.ylabel(\"Total Profit\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "        elif query == \"Total revenue generated per year\":\n",
        "              result_df = run_query(queries_by_guvi[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.plot(result_df[\"year\"], result_df[\"total_revenue\"], marker='o', color='blue')\n",
        "            plt.title(\"Total Revenue Generated Per Year\")\n",
        "            plt.xlabel(\"Year\")\n",
        "            plt.ylabel(\"Total Revenue\")\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"Products with no profit\":\n",
        "             result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None and not result_df.empty:\n",
        "            st.write(\"Products with No Profit:\")\n",
        "            st.write(result_df)\n",
        "\n",
        "\n",
        "        elif query == \"Revenue Per Ship Mode\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.plot(result_df[\"ship_mode\"], result_df[\"total_revenue\"], marker='o', color='blue')\n",
        "            plt.title(\"Revenue Per Ship Mode\")\n",
        "            plt.xlabel(\"Year\")\n",
        "            plt.ylabel(\"Total Revenue\")\n",
        "            st.plyplot(plt)\n",
        "\n",
        "        elif query == \"Top 3 cities by Lowest Discount\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"city\"], result_df[\"discount\"], color='purple')\n",
        "            plt.title(\"Top 3 Cities BY Lowest Discount\")\n",
        "            plt.xlabel(\"City\")\n",
        "            plt.ylabel(\"discount\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"Highest Revenue Sub Category\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"sub_category\"], result_df[\"revenue\"], color='green')\n",
        "            plt.title(\"Highest Revenue Sub Category\")\n",
        "            plt.xlabel(\"sub_category\")\n",
        "            plt.ylabel(\"Revenue\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"highest_quantity_product\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"procduct_id\"], result_df[\"total_qunatity_sold\"], color='green')\n",
        "            plt.title(\"highest_quantity_product\")\n",
        "            plt.xlabel(\"product_id\")\n",
        "            plt.ylabel(\"total_quantity_sold\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"highest_revenue_month\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"month\"], result_df[\"toatl_revenue\"], color='brown')\n",
        "            plt.title(\"highest_revenue_month\")\n",
        "            plt.xlabel(\"month\")\n",
        "            plt.ylabel(\"total_revenue\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"state_with_highest_orders\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"states\"], result_df[\"order_count\"], color='black')\n",
        "            plt.title(\"state_with_highest_orders\")\n",
        "            plt.xlabel(\"states\")\n",
        "            plt.ylabel(\"order_count\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        elif query == \"revenue_and_profit_per_region\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"total_revenue\"], result_df[\"total_profit\"], color='yellow')\n",
        "            plt.title(\"revenue_and_profit_per_region\")\n",
        "            plt.xlabel(\"total_revenue\")\n",
        "            plt.ylabel(\"total_profit\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "\n",
        "        elif query == \"percentage contribution\":\n",
        "              result_df = run_query(my_own_queries[query])\n",
        "        if result_df is not None:\n",
        "            plt.xlabel(\"total_renvenue\")\n",
        "            plt.figure(figsize=(10, 6))\n",
        "            plt.bar(result_df[\"total_profit\"], result_df[\"total_revenue\"], color='black')\n",
        "            plt.title(\"percentage_contribution\")\n",
        "            plt.ylabel(\"total_profit\")\n",
        "            plt.xticks(rotation=45)\n",
        "            st.pyplot(plt)\n",
        "\n",
        "        else:\n",
        "           st.warning(\"No data available for this query.\")\n",
        "else:\n",
        "           st.warning(\"Please select a query.\")\n",
        "\n",
        "           st.text(\"Thank you for using the dashboard!\")"
      ],
      "metadata": {
        "id": "1CcaCC7kLvjI",
        "outputId": "3a17097b-3fca-4b9f-e80f-cae52527172e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 124
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax. Perhaps you forgot a comma? (<ipython-input-56-b89736e8c395>, line 61)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-56-b89736e8c395>\"\u001b[0;36m, line \u001b[0;32m61\u001b[0m\n\u001b[0;31m    'SELECT DATE_PART('year', order_date::DATE) AS year, SUM(sale_price) AS total_revenue FROM df GROUP BY  DATE_PART('year', order_date::DATE) ORDER BY  year;'\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
          ]
        }
      ]
    }
  ]
}